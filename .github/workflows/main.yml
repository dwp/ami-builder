name: Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:   
      - name: Prepare SemVer
        id: prepare-semver
        run: |
          set +o pipefail
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          set -o pipefail
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          echo "latest_version_out=$LATEST_VERSION" >> $GITHUB_OUTPUT
          VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          commit_message=$( echo "${{ github.event.head_commit.message }}" | sed 's/"//g')
          if [[ "${commit_message,,}" == *"major release"* ]]; then
            echo "semver_increment=m" >> $GITHUB_OUTPUT
          elif [[ "${commit_message,,}" == *"minor release"* ]]; then
            echo "semver_increment=i" >> $GITHUB_OUTPUT
          else
            echo "semver_increment=p" >> $GITHUB_OUTPUT
          fi

      - name: Increment SemVer
        id: semver
        uses: matt-FFFFFF/simple-semver@v0.1.0
        with:
          semver-input: ${{ steps.prepare-semver.outputs.latest_version_out }}
          increment: ${{ steps.prepare-semver.outputs.semver_increment }}
      
      - name: Get publish version
        id: get-publish-version
        run: |
          echo "publish-version=${{ steps.semver.outputs.semver }}" >> $GITHUB_OUTPUT
  
  
  build-and-publish-github-release:
    runs-on: ubuntu-latest
    needs: [get-publish-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: install dependencies
        run: |
            set -x
            mkdir artifacts
            sudo pip install -r requirements.txt -t artifacts
            cp -v ami_builder.py LICENSE packer_template.json.j2 README.md artifacts
            PACKER_VERSION=1.4.4
            curl -O https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
            cd artifacts
            unzip ../packer_${PACKER_VERSION}_linux_amd64.zip
            set +o pipefail
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            set -o pipefail
            [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
            VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            VERSION_NUMBER=$(echo $VERSION | sed 's/^v\(.*\)$/\1/')
            zip -r ami-builder.zip *
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false

      - name: upload ami-builder.zip file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ami-builder.zip
          asset_name: ami-builder-${{ needs.get-publish-version.outputs.publish-version }}.zip
          asset_content_type: application/gzip
